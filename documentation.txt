Don't forget to document your implementation:
-> language + external libraries used (if any)
-> control flow with headers/status codes considered for each requirement (GET, persistent connections, ETag, encoding)
-> concurrency, hashing, resource encoding
-> challenges (if any)


This project implements a simple HTTP server that is able to process GET requests, handle 
persistent connections, does cache handling and is able to encode data using gzip. To achieve 
these goals, we used python.


Table of Contents


1. Structure

python webserver.py [−a ADDRESS] [−p PORT] [− t TIMEOUT]

1.1 libraries used
This project is written in Python 2, but should be easily portable to Python 3; only things 
like print statements should be changed for that. The most important library used is the socket 
library. This library handles the transport layer (TCP) so we could focus on the application layer (HTTP).
For compressing the data we used the gzip library in combination with shutil. The md5 method from hashlib was ised to generate the ETags.
Other external libraries that where used are time, mimetypes, urlparse, and argparse.

2 Control flow

2.1 GET requests
When a client tries to connect to the server, the first thing the server does is accepting the connection. This returns a client socket which the server can send packages to. After the connection is accepted the server creates a thread that waits for data from the client. When the server receives data this data is parsed and a response if composed. If this data is not identified as a GET request the composer creates response with code 501 (Not Implemented). When it is identified as a GET request the composer tries to compose a response with code 200 (OK) containing the data of the requested file as the body. If something goes wrong during the reading of the requested file either code 403 (Forbidden) or code 404 (Not Found) is send to the client without any headers, corresponding to the situation.

2.2 Persistent connections

2.3 ETags

'HTTP/1.1 304 Not Modified'

2.4 Encoding
If the request contains the 'Accept-Encoding' header and this headers value contains 'gzip', the content of the requested file is encoded in gzip format before it is added to the response.


3 Difficulties
